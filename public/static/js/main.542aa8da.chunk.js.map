{"version":3,"sources":["components/LaunchItem.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","moment","format","to","LAUNCHES_QUERY","gql","Launches","query","loading","error","data","console","launches","map","key","LAUNCH_QUERY","Launch","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"4TA0BeA,EAtBI,SAAC,GAEb,IAAD,IADJC,OAAUC,EACN,EADMA,cAAeC,EACrB,EADqBA,aAAcC,EACnC,EADmCA,kBAAmBC,EACtD,EADsDA,eAE1D,OACE,yBAAKC,UAAU,uBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,0BAAMA,UAAWD,EAAiB,eAAiB,eACjD,4BAAKF,IAEP,4BAAKI,IAAOH,GAAmBI,OAAO,iBAExC,yBAAKF,UAAU,YACb,kBAAC,IAAD,CAAMG,GAAE,kBAAaP,GAAiBI,UAAU,qBAAhD,sB,oNCVV,IAAMI,EAAiBC,IAAH,KA4BLC,EAjBE,WACf,OACE,6BACE,wBAAIN,UAAU,QAAd,YACA,kBAAC,IAAD,CAAOO,MAAOH,IACX,YAA+B,IAA5BI,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAClB,OAAIF,EAAgB,2CAChBC,GAAOE,QAAQF,MAAMA,GAClBC,EAAKE,SAASC,KAAI,SAAAlB,GAAM,OAC7B,kBAAC,EAAD,CAAYmB,IAAKnB,EAAM,cAAmBA,OAAQA,a,8WCtB9D,IAAMoB,EAAeV,IAAH,KAwEHW,EAvDA,SAAAC,GAAU,IACjBrB,EAAkBqB,EAAMC,MAAMC,OAA9BvB,cAEN,OADAA,EAAgBwB,SAASxB,GAEvB,6BACE,kBAAC,IAAD,CAAOW,MAAOQ,EAAcM,UAAW,CAAEzB,mBACtC,YAA+B,IAA5BY,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAClB,GAAIF,EAAS,OAAO,0CAChBC,GAAOE,QAAQF,MAAMA,GAFI,MAUzBC,EAAKf,OALPE,EAL2B,EAK3BA,aACAD,EAN2B,EAM3BA,cACAG,EAP2B,EAO3BA,eACAuB,EAR2B,EAQ3BA,YAR2B,IAS3BC,OAAUC,EATiB,EASjBA,UAAWC,EATM,EASNA,YAAaC,EATP,EASOA,YAGpC,OACE,6BACE,wBAAI1B,UAAU,kBAAkBH,GAChC,wBAAIG,UAAU,QAAd,kBACA,wBAAIA,UAAU,cACZ,wBAAIA,UAAU,mBAAd,kBACkBJ,GAElB,wBAAII,UAAU,mBAAd,gBAA8CsB,GAC9C,wBAAItB,UAAU,mBAAd,qBAEE,0BACEA,UAAWD,EAAiB,eAAiB,eAE5CA,EAAiB,OAAS,SAKjC,wBAAIC,UAAU,QAAd,kBACA,wBAAIA,UAAU,cACZ,wBAAIA,UAAU,mBAAd,cAA4CwB,GAC5C,wBAAIxB,UAAU,mBAAd,gBAA8CyB,GAC9C,wBAAIzB,UAAU,mBAAd,gBAA8C0B,IAEhD,6BACA,kBAAC,IAAD,CAAMvB,GAAG,IAAIH,UAAU,qBAAvB,cCxDR2B,EAAS,IAAIC,IAAa,CAC9BC,IAAK,aAiBQC,EAdH,WACV,OACE,kBAAC,IAAD,CAAgBH,OAAQA,GACtB,kBAAC,IAAD,KACE,yBAAK3B,UAAU,aACb,sCACA,kBAAC,IAAD,CAAO+B,OAAK,EAACC,KAAK,IAAIC,UAAW3B,IACjC,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,yBAAyBC,UAAWjB,QCT5CkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,2DCZNoB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLE,QAAQF,MAAMA,EAAMwC,c","file":"static/js/main.542aa8da.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\n\nconst LaunchItem = ({\n  launch: { flight_number, mission_name, launch_date_local, launch_success }\n}) => {\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <span className={launch_success ? 'text-success' : 'text-danger'}>\n            <h4>{mission_name}</h4>\n          </span>\n          <h4>{moment(launch_date_local).format('MMM d, YYYY')}</h4>\n        </div>\n        <div className=\"col-md-3\">\n          <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">\n            Launch Details\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LaunchItem;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\n// utils\nimport LaunchItem from './LaunchItem';\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nconst Launches = () => {\n  return (\n    <div>\n      <h3 className=\"my-3\">Launches</h3>\n      <Query query={LAUNCHES_QUERY}>\n        {({ loading, error, data }) => {\n          if (loading) return <h4>Loading...</h4>;\n          if (error) console.error(error);\n          return data.launches.map(launch => (\n            <LaunchItem key={launch['flight_number']} launch={launch} />\n          ));\n        }}\n      </Query>\n    </div>\n  );\n};\n\nexport default Launches;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nconst Launch = props => {\n  let { flight_number } = props.match.params;\n  flight_number = parseInt(flight_number);\n  return (\n    <div>\n      <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n        {({ loading, error, data }) => {\n          if (loading) return <h4>Loading...</h4>;\n          if (error) console.error(error);\n\n          const {\n            mission_name,\n            flight_number,\n            launch_success,\n            launch_year,\n            rocket: { rocket_id, rocket_name, rocket_type }\n          } = data.launch;\n\n          return (\n            <div>\n              <h1 className=\"display-4 my-3\">{mission_name}</h1>\n              <h4 className=\"mb-3\">Launch Details</h4>\n              <ul className=\"list-group\">\n                <li className=\"list-group-item\">\n                  Flight Number: {flight_number}\n                </li>\n                <li className=\"list-group-item\">Launch Year: {launch_year}</li>\n                <li className=\"list-group-item\">\n                  Launch Successful:\n                  <span\n                    className={launch_success ? 'text-success' : 'text-danger'}\n                  >\n                    {launch_success ? ' Yes' : ' No'}\n                  </span>\n                </li>\n              </ul>\n\n              <h4 className=\"my-3\">Rocket Details</h4>\n              <ul className=\"list-group\">\n                <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n                <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n              </ul>\n              <hr></hr>\n              <Link to=\"/\" className=\"btn btn-secondary\">\n                Back\n              </Link>\n            </div>\n          );\n        }}\n      </Query>\n    </div>\n  );\n};\n\nexport default Launch;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\n// local\nimport './App.css';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nconst App = () => {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <h1>SpaceX</h1>\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}